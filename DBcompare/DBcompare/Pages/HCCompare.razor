@page "/"
@using DBcompare.Common
@using Enum

<PageTitle>HomerunClash</PageTitle>

<h3 id="TextTitle">홈런클래시</h3>
<br>

<div style="display: flex;">
    <!-- Left Section -->
    <div style="flex: 1;">
        <!-- Content for the left section -->
    </div>
    
    <!-- Right Section -->
    <div style="position: relative;">
        <div style="position: absolute; top: 0; right: 100px;">
            <MatTabGroup @bind-ActiveIndex="@tabIndex" Style="width: 1200px">
                @foreach(var tableInfo in tableListForTabDelete.Where(e => e.isDifferent))
                {
                    <MatTab Label="@tableInfo.tableName">
                        <LabelContent>
                            @tableInfo.tableName
                        </LabelContent>
                        <ChildContent>
                            @if (tableInfo.DifferentType == DifferentType.TableNotExist)
                            {
                                <br><br>
                                <h5>Table Not Exist</h5>
                                <h5>@tableInfo.tableName</h5>
                            }
                            @if (tableInfo.DifferentType == DifferentType.ColumnDifferent)
                            {
                                <br><br>
                                <h5>Column is different</h5>
                                <h5>@tableInfo.tableName</h5>
                                <br><br>
                                @foreach (var column in tableInfo.Columns)
                                {
                                    @foreach(var columnInfo in column)
                                    {
                                        <h5>@columnInfo</h5>
                                    }
                                }
                            }
                            
                            @if (tableInfo.DifferentType == DifferentType.DataDifferent)
                            {
                                <br><br>
                                <h5>Data is different</h5>
                                <h5>@tableInfo.tableName</h5>
                                <br>
                                
                                <MatTabGroup @bind-ActiceIndex="@tabIndex1" Style="width: 1200px; color: #ffca2c">
                                    <MatTab Label="Table1">
                                        <br><br>
                                        <div id="container" class style="width: 1200px; height: 600px; overflow: auto; margin-top: 10px">
                                            <table border="1" class="table table-border table-hover w-auto">
                                                <thead>
                                                <tr class="table-primary">
                                                    @foreach (var column in tableInfo.Columns[0])
                                                    {
                                                        <th id="fixedHeader">@column</th>
                                                    }
                                                </tr>
                                                </thead>
                                                <tbody>

                                                @foreach (var row in tableInfo.Table1DifferentRows.ToList())
                                                {
                                                    <tr>
                                                        @foreach (var data in row)
                                                        {
                                                            @if (data == null)
                                                            {
                                                                <td>Null</td>
                                                            }
                                                            else
                                                            {
                                                                <td>@data.ToString()</td>
                                                            }
                                                        }
                                                    </tr>
                                                }
                                                </tbody>
                                            </table>
                                        </div>
                                    </MatTab>
        
                                    <MatTab Label="Table2">
                                        <br><br>
                                        <div id="container" class style="width: 1200px; height: 600px; overflow: auto; margin-top: 10px">
                                            <table border="1" class="table table-border table-hover w-auto">
                                            <thead>
                                            <tr class="table-primary">
                                                @foreach (var column in tableInfo.Columns[0])
                                                {
                                                    <th id="fixedHeader">@column</th>
                                                }
                                            </tr>
                                            </thead>
                                            <tbody>

                                            @foreach (var row in tableInfo.Table2DifferentRows.ToList())
                                            {
                                                <tr>
                                                    @foreach (var data in row)
                                                    {
                                                        @if (data == null)
                                                        {
                                                            <td>Null</td>
                                                        }
                                                        else
                                                        {
                                                            <td>@data.ToString()</td>
                                                        }
                                                    }
                                                </tr>
                                            }
                                            </tbody>
                                            </table>
                                        </div>
                                    </MatTab>
                                </MatTabGroup>
                                
                                
                                
                                
                            }
                        </ChildContent>
                        
                        
                    </MatTab>
                }
            </MatTabGroup>
        </div>
        <!-- Content for the right section -->
    </div>
</div>

<div class="horizontal-container">
    <h3 id="Text3Style">Step1) </h3>
    <h3 id="Text2Style">비교할 서버2개를 선택하세요.</h3>
</div>
<div>
    <MatCheckbox @bind-Value="@sServerChecked" Label="S&nbsp;&nbsp;&nbsp;&nbsp;"></MatCheckbox>
    <MatCheckbox @bind-Value="@cServerChecked" Label="C&nbsp;&nbsp;&nbsp;&nbsp;"></MatCheckbox>
    <MatCheckbox @bind-Value="@qServerChecked" Label="Q&nbsp;&nbsp;&nbsp;&nbsp;"></MatCheckbox>
    <MatCheckbox @bind-Value="@inspectionChecked" Label="Inspection&nbsp;&nbsp;&nbsp;&nbsp;"></MatCheckbox>
    <MatCheckbox @bind-Value="@liveChecked" Label="Live&nbsp;&nbsp;&nbsp;&nbsp;"></MatCheckbox>
</div>



@if (CheckIfTwoIsSelected())
{
    <div>
        <button type="submit" class="btn btn-success" style="width: 80px" @onclick="SelectServerBtn" disabled="@showDatabaseSelect">선택</button>
    </div>
}

@if (showDatabaseSelect)
{
    <br><br>
    <div>
        <div class="horizontal-container">
            <h3 id="Text3Style">Step2) </h3>
            <h3 id="Text2Style">비교할 데이터베이스를 선택하세요.</h3>
        </div>
    </div>
    <div>
        <select class="form-select" style="width: 300px" @onchange="(e) => compareDatabaseName = e.Value.ToString()" disabled="@showTableSelect">
            @foreach (var dbName in ServerInfo.Instance.HomerunClashDatabases)
            {
                <option value="@dbName" selected="@(dbName == compareDatabaseName)">@dbName</option>
            }
        </select>
        
        <button type="submit" class="btn btn-success" style="width: 80px" @onclick="SelectDatabaseBtn" disabled="@showTableSelect">선택</button>
    </div>
}

@if (showTableSelect)
{
    <br><br>
    <div>
        <div class="horizontal-container">
          <h3 id="Text3Style">Step3)</h3>
          <h3 id="Text2Style">비교할 테이블을 입력하세요.</h3>
        </div>
    </div>
    <div>
        <input type="text" size="30" @bind="@tableToAdd">
        <button type="submit" class="btn btn-primary" style="width: 80px" @onclick="AddTableList">추가</button>
        @*<button type="submit" class="btn btn-success" @onclick="@(e => StartCompareBtnAsync(true))">전체 비교</button>*@
    </div>
    
    @if (!isLoading)
    {
        @foreach (var tableToAdd in tableList)
        {
            <div style="display: flex;">
                <h3 id="Text1Style">@tableToAdd.tableName </h3>
                @if (doCompare)
                {
                    if (tableToAdd.isDifferent)
                    {
                        <MatIcon class="mat-icon-error">error</MatIcon>
                        if (tableToAdd.DifferentType == DifferentType.TableNotExist)
                        {
                            <h>Table not exist</h>
                        }
                        if (tableToAdd.DifferentType == DifferentType.ColumnDifferent)
                        {
                            <h>Column is different</h>
                        }
                        if (tableToAdd.DifferentType == DifferentType.DataDifferent)
                        {
                            <h>Data is different</h>
                        }
                    }
                    else
                    {
                        <MatIcon class="mat-icon-confirm">check</MatIcon>
                    }
                }
            </div>
        }
    }
    else
    {
        <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Large" />
    }
    
    @if (tableList.Count > 0)
    {
        <div>
            <button type="submit" class="btn btn-success" @onclick="@(e => StartCompareBtnAsync(false))">비교하기</button>
            @if (doCompare)
            {
                <button type="submit" class="btn btn-info" style="width: 80px" @onclick="DumpBtn" disabled="@doDump">덤프</button>
            }
        </div>
    }
    
    @if (doDump)
    {
        <br><br>
        <div class="horizontal-container">
            <h3 id="Text3Style">Step4) </h3>
            <h3 id="Text2Style">덤프 대상 서버를 선택하세요.</h3>
        </div>
        <div>
            <MatCheckbox @bind-Value="@dumpSServerChecked" Label="S&nbsp;&nbsp;&nbsp;&nbsp;"></MatCheckbox>
            <MatCheckbox @bind-Value="@dumpCServerChecked" Label="C&nbsp;&nbsp;&nbsp;&nbsp;"></MatCheckbox>
            <MatCheckbox @bind-Value="@dumpQServerChecked" Label="Q&nbsp;&nbsp;&nbsp;&nbsp;"></MatCheckbox>
            <MatCheckbox @bind-Value="@dumpInspectionChecked" Label="Inspection&nbsp;&nbsp;&nbsp;&nbsp;"></MatCheckbox>
            <MatCheckbox @bind-Value="@dumpLiveChecked" Label="Live&nbsp;&nbsp;&nbsp;&nbsp;"></MatCheckbox>
        </div>
        
        @if (CheckIfOneIsSelected())
        {
            if(isDumpLoading)
            {
                <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Large" />
            }
            else
            {
                if (!finishedDump)
                {
                    <div>
                        <button type="submit" class="btn btn-success" @onclick="DumpAsyncBtn">덤프 시작</button>
                    </div>
                }
                else
                {
                    <div>
                        <button type="submit" class="btn btn-warning" @onclick="DumpAsyncBtn">다시 덤프</button>
                    </div>
                }
            }
        }
    }
    
}

@code
{
    int tabIndex = 0;
    int tabIndex1 = 0;
    
    bool sServerChecked = false;
    bool cServerChecked = false;
    bool qServerChecked = true;
    bool inspectionChecked = false;
    bool liveChecked = true;
    
    bool dumpSServerChecked = false;
    bool dumpCServerChecked = false;
    bool dumpQServerChecked = true;
    bool dumpInspectionChecked = false;
    bool dumpLiveChecked = false;

    bool showDatabaseSelect = false;
    bool showTableSelect = false;
    bool doCompare = false;
    bool doDump = false;
    bool isLoading = false;
    bool isDumpLoading = false;
    bool finishedDump = false;

    string compareDatabaseName = "HomerunClashConst";
    string tableToAdd = "";

    List<TableInfo> tableList = new List<TableInfo>();
    
    List<TableInfo> tableListForTabDelete = new List<TableInfo>();

    private bool CheckIfTwoIsSelected()
    {
        int trueCheckedCount = 0;
        
        if (sServerChecked)
            trueCheckedCount++;
        if (cServerChecked)
            trueCheckedCount++;
        if (qServerChecked)
            trueCheckedCount++;
        if (inspectionChecked)
            trueCheckedCount++;
        if (liveChecked)
            trueCheckedCount++;

        if (trueCheckedCount == 2)
            return true;

        return false;
    }

    private bool CheckIfOneIsSelected()
    {
        int trueCheckedCount = 0;
        
        if (dumpSServerChecked)
            trueCheckedCount++;
        if (dumpCServerChecked)
            trueCheckedCount++;
        if (dumpQServerChecked)
            trueCheckedCount++;
        if (dumpInspectionChecked)
            trueCheckedCount++;
        if (dumpLiveChecked)
            trueCheckedCount++;

        if (trueCheckedCount == 1)
            return true;

        return false;
    }
}

@code
{
    private void SelectServerBtn()
    {
        showDatabaseSelect = true;
    }

    private void SelectDatabaseBtn()
    {
        showTableSelect = true;
    }

    private void AddTableList()
    {
        if (tableToAdd != String.Empty)
        {
            TableInfo tableInfo = new TableInfo();

            if (!tableToAdd.StartsWith("tbl"))
                tableToAdd = "tbl" + tableToAdd;

            if(tableList.Select(e => e.tableName).ToList().Contains(tableToAdd))
                return;
            
            tableInfo.tableName = tableToAdd;

            tableList.Add(tableInfo);
        }
        tableToAdd = String.Empty;
    }

    private void ResetTableList()
    {
        foreach (var item in tableList)
        {
            item.isDifferent = false;
            item.DifferentType = DifferentType.None;
            item.Columns = new List<string>[2];
            item.Table1DifferentRows = new List<List<object?>>();
            item.Table2DifferentRows = new List<List<object?>>();
        }
    }

    private async Task StartCompareBtnAsync(bool compareAllTables)
    {
        ResetTableList();
        
        List<string> servers = new List<string>();
        string database = compareDatabaseName;
        List<string> tables = new List<string>();
        
        if (sServerChecked)
            servers.Add(ServerInfo.Instance.Team3s);
        if (cServerChecked)
            servers.Add(ServerInfo.Instance.Team3c);
        if (qServerChecked)
            servers.Add(ServerInfo.Instance.Team3q);
        if(inspectionChecked)
            servers.Add(ServerInfo.Instance.HomerunClashInspection);
        if (liveChecked)
        {
            if(database == "HomerunClashConst")
                servers.Add(ServerInfo.Instance.HomerunClashLiveCommon);
            if(database == "HomerunClashGame")
                servers.Add(ServerInfo.Instance.HomerunClashLiveGame1);
            if(database == "HomerunClashClan")
                servers.Add(ServerInfo.Instance.HomerunClashLiveClan);
            if(database == "HomerunClashRank")
                servers.Add(ServerInfo.Instance.HomerunClashLiveRank);
            if(database == "HomerunClashLog")
                servers.Add(ServerInfo.Instance.HomerunClashLiveLog);
        }

        isLoading = true;
        var compareResult = await CompareManager.CompareAsync(servers, database, tableList);
        tableList = compareResult;
        tableListForTabDelete = compareResult.Select(e => e).ToList();
        
        doCompare = true;
        isLoading = false;
    }

    private void DumpBtn()
    {
        doDump = true;
    }

    private async Task DumpAsyncBtn()
    {
        isDumpLoading = true;
        
        string server = String.Empty;
        string database = compareDatabaseName;
        List<string> tables = new List<string>();
        
        if(dumpSServerChecked)
            server = ServerInfo.Instance.Team3s;
        if(dumpCServerChecked)
            server = ServerInfo.Instance.Team3c;
        if(dumpQServerChecked)
            server = ServerInfo.Instance.Team3q;
        if(dumpInspectionChecked)
            server = ServerInfo.Instance.HomerunClashInspection;
        if (dumpLiveChecked)
        {
            if(database == "HomerunClashConst")
                server = ServerInfo.Instance.HomerunClashLiveCommon;
            if(database == "HomerunClashGame")
                server = ServerInfo.Instance.HomerunClashLiveGame1;
            if(database == "HomerunClashClan")
                server = ServerInfo.Instance.HomerunClashLiveClan;
            if(database == "HomerunClashRank")
                server = ServerInfo.Instance.HomerunClashLiveRank;
            if(database == "HomerunClashLog")
                server = ServerInfo.Instance.HomerunClashLiveLog;
        }
        
        await DumpManager.DumpAsync(database, server, tableList.Where(e => e.isDifferent).Select(e => e.tableName).ToList(), database == "HomerunClashConst");
        
        isDumpLoading = false;
        finishedDump = true;
    }
}

@code {
    public void UpdateChecked(string checkboxName)
    {
        // Reset other checkboxes except the one that triggered the event
        if (checkboxName != "S") sServerChecked = false;
        if (checkboxName != "C") cServerChecked = false;
        if (checkboxName != "Q") qServerChecked = false;
        if (checkboxName != "Inspection") inspectionChecked = false;
        if (checkboxName != "Live") liveChecked = false;
    }
}

@code
{
    void CloseTab(string tableName)
    {
        tableListForTabDelete = tableListForTabDelete.Where(e => e.tableName != tableName).ToList();
    }
}
